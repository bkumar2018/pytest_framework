Pytest requires the test function names to start with test. Function names which are not of format test* are not considered as test functions by pytest. We cannot explicitly make pytest consider any function not starting with test as a test function.


pip install -U pytest
pytest --version

pytest <nameoffile>.py 
pytest -v <nameoffile>.py   [-v increases the verbosity.]

Note : pytest command will execute all the files of format test_* or *_test in the current directory and subdirectories.

Markers:
Pytest allows us to use markers on test functions. Markers are used to set various features/attributes to test functions. Pytest provides many inbuilt markers such as xfail, skip and parametrize. Apart from that, users can create their own marker names. Markers are applied on the tests using the syntax given below −
@pytest.mark.<markername>
To use markers, we have to import pytest module in the test file.
pytest -m <markername> -v <filename>

Fixtures:
Fixtures are functions, which will run before each test function to which it is applied. 
Fixtures are used to feed some data to the tests such as database connections, URLs to test and 
some sort of input data. Therefore, instead of running the same code for every test, 
we can attach fixture function to the tests and it will run and return the data to the test 
before executing each test.

A function is marked as a fixture by −
@pytest.fixture

A test function can use a fixture by mentioning the fixture name as an input parameter.

@pytest.mark.parametrize("num, output",[(1,11),(2,22),(3,35),(4,44)])
def test_multiplication_11(num, output):
   assert 11*num == output



We will learn about the Skip and Xfail tests in Pytest.

Now, consider the below situations −

    A test is not relevant for some time due to some reasons.
    A new feature is being implemented and we already added a test for that feature.
In these situations, we have the option to xfail the test or skip the tests.

Pytest will execute the xfailed test, but it will not be considered as part failed or passed tests. Details of these tests will not be printed even if the test fails (remember pytest usually prints the failed test details). We can xfail tests using the following marker −
@pytest.mark.xfail

@pytest.mark.skip
Skipping a test means that the test will not be executed. We can skip tests using the following marker −


All the 3 tests will fail on executing this test file. Here, we are going to stop the execution of the test after one failure itself by −
pytest test_failure.py -v --maxfail 1


Pytest - Run Tests in Parallel

By default, pytest runs tests in sequential order. In a real scenario, a test suite will have a number of test files and each file will have a bunch of tests. This will lead to a large execution time. To overcome this, pytest provides us with an option to run tests in parallel.
For this, we need to first install the pytest-xdist plugin.
Install pytest-xdist by running the following command −

pip install pytest-xdist

Now, we can run tests by using the syntax pytest -n <num>
pytest -n 3
-n <num> runs the tests by using multiple workers, here it is 3.

We will not be having much time difference when there is only a few tests to run. However, it matters when the test suite is large.

Test Execution Results in XML Format
pytest test_multiplication.py -v --junitxml="result.xml"

////
Summary info of pytest:

Installing pytest..
Identifying test files and test functions.
Executing all test files using pytest –v.
Executing specific file usimng pytest <filename> -v.
Execute tests by substring matching pytest -k <substring> -v.
Execute tests based on markers pytest -m <marker_name> -v.
Creating fixtures using @pytest.fixture.
conftest.py allows accessing fixtures from multiple files.
Parametrizing tests using @pytest.mark.parametrize.
Xfailing tests using @pytest.mark.xfail.
Skipping tests using @pytest.mark.skip.
Stop test execution on n failures using pytest --maxfail = <num>.
Running tests in parallel using pytest -n <num>.
Generating results xml using pytest -v --junitxml = "result.xml".



